<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技忆</title>
  <subtitle>Phoebe&#39;s little progress</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.phoebepan.cn/"/>
  <updated>2018-05-21T02:36:35.000Z</updated>
  <id>http://www.phoebepan.cn/</id>
  
  <author>
    <name>Phoebe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《斜杠青年》</title>
    <link href="http://www.phoebepan.cn/2018/05/21/slash/"/>
    <id>http://www.phoebepan.cn/2018/05/21/slash/</id>
    <published>2018-05-21T07:30:16.000Z</published>
    <updated>2018-05-21T02:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>把时间看成自己的“原始资本”，他们需要思考的是如何才能用最少的时间创造最大的价值和更多的收入。在这个价值最大化的过程中，他们有个至关重要的“法宝”，那便是杠杆。</p>
</blockquote>
<a id="more"></a>
<h3 id="所读所悟"><a href="#所读所悟" class="headerlink" title="所读所悟"></a>所读所悟</h3><p>生命是如此无常，以至于我们根本无法预知明天和意外哪个先来，所以与其担心未来，牺牲现在去为那些可能的意外做准备，还不如好好地用心把每一天过好。</p>
<blockquote>
<p><strong>我：</strong>不念过往，不急于未来，活在当下。</p>
</blockquote>
<p>工作只不过是手段而已，不是目的。</p>
<blockquote>
<p><strong>我：</strong>作为即将毕业的硕士生，此阶段的我就处于一种困境中：我知道自己爱折腾并不适合那种稳定的上班生活，却没有足够的资本与勇气去摆脱它，更没有想明白什么样的生活才是自己想要的。工作是手段，不是目的，戒浮躁，努力投资自己，让生活富有激情、创造力和活力，尽早拥有某种核心竞争力。</p>
</blockquote>
<p>人活着就是为了受苦的，苦受完了，生命也就该结束了。</p>
<blockquote>
<p><strong>我：</strong>“只要有了活下去的理由，几乎什么都能忍受。生活有意义，就算在困境中也能甘之如饴；生活无意义，就算在顺境中也度日如年。”升级打怪，进化成长，怎能不受点磨炼。</p>
</blockquote>
<p>现代经济正在经历着一场巨大的变革，经济发展的动力从“左脑能力”转移到“右脑能力”，即创造力、共情能力和全局思维能力变得越来越重要。</p>
<blockquote>
<p><strong>我：</strong>简单机械的劳动工种必将被人工智能等高新技术取代，全面高认知的能力才是未来大势所趋。</p>
</blockquote>
<p>商业的本质就是交换，如果我们可以绕过机构直接实现交易，为彼此提供更加个性化的商品和服务，那么机构的重要性便会越来越低。</p>
<blockquote>
<p><strong>我：</strong>得到，在行等等APP，将知识与技能变成直接消费品，就是一个很好的机构重要性的案例。现在我们生存，不仅需要有清晰的自我认知，还需要有一定的商业头脑、足够的实力和执行力，以及强大的内心。</p>
</blockquote>
<p>把时间看成自己的“原始资本”，他们需要思考的是如何才能用最少的时间创造最大的价值和更多的收入。在这个价值最大化的过程中，他们有个至关重要的“法宝”，那便是杠杆。</p>
<blockquote>
<p><strong>我：</strong>我们很有必要从现在开始就训练自己从“打工者思维”升级到“创业者思维”，并学会通过以下方式更好地杠杆自己的时间。</p>
</blockquote>
<p><img src="/images/gangg.JPG" alt="gangg"></p>
<p>富翁拥有选择的权利，这也使得他的人生拥有了更多的可能性。财务自由最终的目标是为了心灵的自由——过自己真正想要的生活，不再为金钱工作，也不再为欲望所累，这才是财务自由的意义所在。</p>
<blockquote>
<p><strong>我：</strong>努力挣钱，不是为了过奢侈糜烂的生活，而是让自己有更多选择，而不必为金钱等所困，不能前行。真正的自由不是“拥有”的自由而是“拒绝”的自由，当我们不再需要为了钱而去做自己不喜欢或者不愿意做的事情的时候，我们才获得了真正意义上的财务自由。</p>
</blockquote>
<p>所谓的被动收入，就是不需要花费多少时间和精力，也不需要照看，就可以自动获得的收入。被动收入也不一定都来源于资金资产或者固定资产，还可以来源于知识产权或者某种事业的持续经营。</p>
<blockquote>
<p><strong>我：</strong>主动建造多条“管道”，是现在自身的“规模经济”。</p>
</blockquote>
<p>僵固型思维者会过于在意别人的评价，不愿意暴露自己的不足，并努力通过回避挑战来避免失败，以此维持自信。</p>
<blockquote>
<p><strong>我：</strong>僵固型思维，转变成成长型思维，保持自省足矣。</p>
</blockquote>
<p>坚持只对简单目标有意义，如果我们面对的是复杂目标，坚持不仅不会帮我们获得想要的结果，有时候甚至还会让我们错失很多机会。复杂目标之所以复杂是因为目标能否达成取决于大量相互关联的因素，并且存在着无数的选择与可能性，而每个选择所导致的结果又是不可预知的。在这样的情况下，坚持其实意味着机会成本，因为坚持一种选择就会失去另外的选择机会。</p>
<blockquote>
<p><strong>我：</strong>别被坚持“绑架”了。</p>
</blockquote>
<p>关于优秀，中国当代著名学者、作家周国平给出了很好的解释：“要让老天赋予你的各种精神、能力得到很好的生长，智、情、德全面发展，拥有自由的头脑、丰富的心灵和高贵的灵魂，这样你就是一个在人性意义上的优秀的人，同时你也就有了享受人生主要的、高级的、幸福的能力。”</p>
<blockquote>
<p><strong>我：</strong>发挥所长，即可谓优秀。</p>
</blockquote>
<p>任何事物的发展都离不开随机的自由探索。宇宙发展的本质其实就是自由探索，地球上的一切事物都是在没有目的、随机探索的进化中形成的，人的发展也不例外。而这种自由探索必须要有足够多的闲暇时间。</p>
<blockquote>
<p><strong>我：</strong>生活一定要留白。未来的竞争拼的是创造力和解决问题的能力，不是效率，而这些能力是一个永远处于忙碌的大脑很难具备的。</p>
</blockquote>
<p>消逝的时间到底是投资还是消费，就在于它是否产生了收益，这种收益大多以个人的人力资本增加为表现形式，而人力资本最终都可以变现。</p>
<blockquote>
<p><strong>我：</strong>与其羡慕，不如行动，现在开始投资还来得及。</p>
</blockquote>
<p>“缺乏痛苦的程度是衡量一个人生活是否幸福的标准。”</p>
<blockquote>
<p><strong>我：</strong>获得幸福的最优人生策略不是要一味地追求外在的快乐，而是要学会如何处理和避免痛苦。</p>
</blockquote>
<h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><ul>
<li>冥想时最重要的不是让自己达到头脑里没有任何念头的状态，而是当念头产生的时候能够迅速觉察，并跟随意识的焦点。</li>
<li>喜欢思考的人，在大彻大悟之前，往往要比那些不怎么喜欢思考的人经历更多内心的痛苦与迷茫。</li>
<li>被动收入可以通过以下几种主要方式来获得：第一，通过股票或者基金获得的理财收入；第二，租金收入，它可以是自己房产的租金收入，也可以是转租收入，例如把租来的房子的部分房间用来做Airbnb；第三，知识产权类，例如图书、音乐、艺术、软件产品等；第四，持续经营，任何一门生意或者事业，无论大小，只要能够持续经营并获利，都能提供不错的被动收入。</li>
<li>商业的本质是以货币为媒介进行交换，从而实现商品流通的经济活动，你首先得有可交换的产品或者服务，然后通过市场营销让你的目标消费群了解你，最终实现交易。</li>
<li>“我们所谓的命运是从我们内部走出来，并不是从外边向我们走进。”</li>
<li>聪明的人能够懂得做正确的事情与正确地做事之间的区别，也明白前者才是成败的关键，因此，他们会给自己足够的时间和空间去思考什么是正确的事情，然后高效、正确地做这些事情。</li>
<li>损失厌恶，指的是同等数量的损失带来的痛苦程度远远大于同等数量收益带来的快乐程度，这其实也是大家对股市下跌做出过度反应的原因，尽管大家都知道低买高卖的道理，结果往往却是高买低卖。积极心理学家的重要任务之一就是给幸福下定义，泰勒·本-沙哈尔认为幸福就是积极情绪加上意义感，马丁·塞利格则认为实现幸福人生应具备5个元素，即积极的情绪、投入感、良好的人际关系、意义和目的感以及成就感。</li>
<li>积极心理学家的重要任务之一就是给幸福下定义，泰勒·本-沙哈尔认为幸福就是积极情绪加上意义感，马丁·塞利格则认为实现幸福人生应具备5个元素，即积极的情绪、投入感、良好的人际关系、意义和目的感以及成就感。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;把时间看成自己的“原始资本”，他们需要思考的是如何才能用最少的时间创造最大的价值和更多的收入。在这个价值最大化的过程中，他们有个至关重要的“法宝”，那便是杠杆。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>《格鲁夫给经理人的第一课》摘录</title>
    <link href="http://www.phoebepan.cn/2018/05/14/manage/"/>
    <id>http://www.phoebepan.cn/2018/05/14/manage/</id>
    <published>2018-05-14T07:30:16.000Z</published>
    <updated>2018-05-21T03:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong><code>管理杠杆率（managerial leverage）</code></strong><br>经理人要善于运用杠杆，用自己的技能和知识，撬动激发团队其他人的产出，推动业务发展！<br>安迪用如下经典公式阐述了管理这一概念：<strong>经理人的产出=他直接管辖部门的产出+他间接影响所及部门的产出</strong></p>
</blockquote>
<a id="more"></a>
<ul>
<li>如果一个人工作上毫无作为，只有两个原因：他要么不会做，要么不想做；不是没能力，就是没动力。相应的提高员工的产出，激励和培训两手抓！</li>
<li>想要成就卓越，你必须是一个乐观主义者，因为卓越的定义就是，你在尝试做一件大多数人都不认为会成功的事。而绝大部分乐观主义者都不会关注坏消息的先行指标。</li>
<li>经理人得好好管理你的活动组合与杠杆率！<br>经理人的产出＝组织产出加总＝a×A＋b×B＋c×C＋……”（a、b、c……代表管理杠杆率，A、B、C……代表各种管理活动。）</li>
<li>“生产”包含什么？<br>你必须按预定的时间、可接受的品质以及可能的最低成本，依据顾客的需求制造及运送产品。</li>
<li>“五何”——何人、何事、何时、何处以及为何</li>
<li>你的时间有限，在接下一项任务时，你同时也拒绝了另外一件事。</li>
<li>我必须重申：会议是从事管理工作必需的媒介。你绝对无法避免开会，但你能让会议更有效率。</li>
<li>经理人每天都在“折旧”。必须要结合具有“知识力”及“权力”的人一起做决策。</li>
<li>当你承诺一件事情的时候，你便失去了做另外一件事情的机会。我们的资源有限，这种取舍难以避免。因此，我们必须培养出何时说“是”或说“不”的判断力和胆识。</li>
<li><strong>混合组织：</strong>我们因此可将功能性部门视作内部的分包商。以业务部门为例，虽然很多公司也雇用非正式的外部销售人员，但一个内部的业务部门应该能以较低的成本提供更好的服务。同样，我们可以将制造部门、财务部门或者数据管理部门等，都视为功能性部门。它们都是公司内部的分包商，提供其他事业部所需要的服务。</li>
<li><blockquote>
<p>我们在工作上的行为，主要也受着如下三项无形但极具效力的因素控制：<br>（1）自由市场因素。<br>（2）契约义务。<br>（3）文化价值观。</p>
</blockquote>
</li>
<li>在马斯洛的理论中，激励和需求的关系十分紧密。人因需求而产生动力，而一旦某项需求得到满足，这项需求便不再是激励的来源。</li>
<li>有两种内在动力可以促使个体将能力发挥到极致：精益求精型和成就导向型。</li>
<li>“靶定得远，箭就射得远”</li>
<li>每个人都要好好想想，到底什么是专业风范，自己是否做得到？最好的测试方法是假设你必须对你朋友的绩效做很严苛的评估，这时如果你觉得胃不舒服甚至想吐，就说明你最好不要在办公室里交朋友。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;管理杠杆率（managerial leverage）&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;经理人要善于运用杠杆，用自己的技能和知识，撬动激发团队其他人的产出，推动业务发展！&lt;br&gt;安迪用如下经典公式阐述了管理这一概念：&lt;strong&gt;经理人的产出=他直接管辖部门的产出+他间接影响所及部门的产出&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Reading Nodes" scheme="http://www.phoebepan.cn/categories/Reading-Nodes/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>《打开量化投资的黑箱》摘录</title>
    <link href="http://www.phoebepan.cn/2018/05/07/liangh/"/>
    <id>http://www.phoebepan.cn/2018/05/07/liangh/</id>
    <published>2018-05-07T07:30:16.000Z</published>
    <updated>2018-05-21T03:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><code>量化3步走：产生想法，研究策略，回测部署</code>，宽客可能并不像想象中那么神秘。他们也是首先观察市场，产生一些普通人也会想到的想法，然后采用市场的客观数据进行研究来确定其想法是否正确，而不是基于传闻或经验甚至直接假设他们的想法是正确的。一旦宽客得到了一个满意的策略，他们会将其布置于一个量化系统中。这类系统在进行投资时，排除了情绪的影响，严格地执行经过测试的策略。</p>
</blockquote>
<a id="more"></a>
<h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><ul>
<li>交易成本模型可以帮助确定交易的换手率，风险模型可以帮助我们避开错误的头寸敞口，投资组合模型可以在交易成本、风险管理、盈利等相互冲突的目标之间进行平衡，并将目标投资组合传输至执行模型，对投资组合模型执行策略。</li>
<li>无论造成供需间的短期不均衡的原因何在，由于均值回复交易者都是在逆势交易，他们都给市场带来了流动性。</li>
<li>采用均值回复策略的交易者，必须识别出目前的价格中心或均衡点，并判断偏离均衡点多少时值得进行交易。如同趋势跟随策略一样，由很多方法可以用来确定价格的均衡点和反转点。</li>
<li>在某些情况下，均值回复策略可作为长期指标，而动量（momentum）可以作为速度指标。</li>
<li>第一个例子是观察期权市场判断市场基本情绪。有两种方式可以“直接”做到这一点。第一种是观察认购量和认沽量，将此作为市场情绪的指标。如果认沽多于认购的程度已经超过正常水平，这可能意味着投资者担心未来的价格会下跌。如果相对于认购期权，认沽期权的数量比正常水平要少，说明市场上主要是看涨情绪。第二个基于期权市场情绪的例子是利用认购和认沽的隐含波动性。认购和认沽期权的隐含波动率具有一定差别，是很常见的现象。股票价格慢涨快跌的特点可以作为一部分原因对此进行解释。对于虚值期权或平值期权，慢涨快跌会造成认沽期权的波动率高于认购期权的波动率，反过来会造成认沽期权的卖方要价高于认购期权卖方的要价，同样对应的隐含波动率也要高一些。</li>
<li>实际上，价值型投资策略认为，市场倾向于高估高风险资产的风险，而低估低风险资产的风险。因此，在适当时间买入高风险资产和（或）卖出低风险资产，可以获得收益。</li>
<li>追求阿尔法回报的交易也是通过寻求市场错配而获利。</li>
<li>基于规则的模型采用启发式的方法，而投资组合优化工具则采用了现代投资组合理论的逻辑脉络。</li>
<li>当短期均线位于长期均线之下时，认为市场处于下跌趋势；反之则认为市场处于上涨趋势。</li>
</ul>
<p>◆ 实施策略</p>
<ul>
<li>第一，宽客倾向于流动性好的产品，因为其交易成本是可以预计的。第二，宽客一般需要大量的优质数据。通常这种数据在具有高流动性的比较成熟的市场上更易获取。第三，宽客更喜欢那些易于使用体系化的模型进行预测的金融产品。</li>
<li>风险管理通常被误认为是降低风险的操作流程，实际上是在给定的风险水平下通过选择敞口并控制其规模而最大化收益。</li>
</ul>
<p>◆ 定义交易成本</p>
<blockquote>
<p>交易成本主要由三部分构成：佣金和费用（commissions and fees）、滑点（slippage）以及市场冲击成本（market impact）。</p>
</blockquote>
<ul>
<li>更为糟糕的是，预测尤其是短期预测越准确，滑点带来的破坏性就越大。</li>
<li>市场冲击是给定订单通过流动性需求对市场造成的价格变动的度量。</li>
<li>当交易者进入市场执行具有一定头寸的交易时，必须得有人愿意接盘，或者提供相应的头寸。交易者需求的规模越大，交易价格就会越高，因为交易者必须得到更多的供给。</li>
</ul>
<p>◆ 交易成本模型</p>
<blockquote>
<p>在量化交易界，进行交易只有两个原因：第一，可以增加盈利的概率或量（比如阿尔法模型）；第二，可以降低亏损的概率或量（例如风险模型）。但这两个原因都会收到一条警告：投资组合收益或风险的一点改进，可能并不足以支付交易成本。】</p>
</blockquote>
<p>◆ 思想的产生</p>
<blockquote>
<p>思想的4个共有来源是：对市场的观察结果、学术文献、研究员或者投资组合经理在量化公司之间的迁移以及来自主观判断型交易者活动的教训。</p>
</blockquote>
<p>◆ 评估量化交易策略<br>投资过程包括6个主要的内容。<br>（1）研究和发展策略；<br>（2）数据搜寻、收集、清洗以及管理；<br>（3）投资选择和构造；<br>（4）投资组合构建；<br>（5）执行；<br>（6）风险管理和监测。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;code&gt;量化3步走：产生想法，研究策略，回测部署&lt;/code&gt;，宽客可能并不像想象中那么神秘。他们也是首先观察市场，产生一些普通人也会想到的想法，然后采用市场的客观数据进行研究来确定其想法是否正确，而不是基于传闻或经验甚至直接假设他们的想法是正确的。一旦宽客得到了一个满意的策略，他们会将其布置于一个量化系统中。这类系统在进行投资时，排除了情绪的影响，严格地执行经过测试的策略。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Reading Nodes" scheme="http://www.phoebepan.cn/categories/Reading-Nodes/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记——《梁宁·产品思维》</title>
    <link href="http://www.phoebepan.cn/2018/02/18/ln_product/"/>
    <id>http://www.phoebepan.cn/2018/02/18/ln_product/</id>
    <published>2018-02-18T07:30:16.000Z</published>
    <updated>2018-02-18T06:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><code>产品能力</code>就是训练一个人：判断信息，抓住要点，整合有限的资源，把自己的价值打包成一个产品向世界交付，并且获得回报。</p>
</blockquote>
<a id="more"></a>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/images/ln.png" alt="ln"></p>
<blockquote>
<p>看一个人，或者一个产品，可以从由表及里的五层来做观察和判断：<br>感知层；角色层；资源层；能力圈；存在感</p>
</blockquote>
<p>浅层关系的建立，依赖感知层+角色层的了解；深层关系，长期关系，战略关系，需要另外三层的了解。</p>
<blockquote>
<p>情绪好比OS，后天学的知识技能，都是安装在底层OS上的一个个APP，知识的调用需要时间和思考，情绪却是一瞬间的体验。</p>
</blockquote>
<p>情绪是你的原点，找到真正的热爱，一步步精进。</p>
<blockquote>
<p><code>满足</code>,<code>愉悦</code>,<code>不爽</code>——深意：<br>量度一个产品到不到位；<br>量度与一个人的关系；<br>可以看到自己的天分和命运。</p>
</blockquote>
<p>自我认知，自我接纳。</p>
<blockquote>
<p>点线面战略选择：<br>想要做一个产品的时候，入手只能是一个点。但你要想清楚，它附着在哪个面上？这个面在和谁竞争，它能如何展开？这个面，是在哪个经济体上？这个经济体，是在快速崛起，还是沉沦？</p>
<p>你要强迫自己，离开牵动你情绪的“点”，去看到“线”的方向，去预测这条“线”的周期，并且明确你自己在周期的哪个位置，是哪个“面”在给你附能。你要明白外部的势能才是最重要的，不要过于苛求哪个跟随你的“点”，这才是决策的关键。</p>
</blockquote>
<p>单点上扑腾，犹如井底之蛙，认知升级，看见看不见，关键点上做好决策。</p>
<blockquote>
<p>深度关系：<br>两个人能否建立深刻的关系还是取决于，她能否能懂他的痛苦，两个人交换了多少能量，交换了多少灵魂。</p>
<p>精神资源：<br>精神资源将形成一个人的精神结构，精神结构会主导他一生的好恶感与羞耻心，他的愿望，梦想与恐惧，从而影响他后来所有的决定。</p>
</blockquote>
<p>你的气质里，藏着你走过的路，看过的风景，读过的书，爱过的人。</p>
<blockquote>
<p>不确定的东西是没有办法让你投入时间或者持续依赖的。</p>
<p>确定，就是依赖；不确定，就是伤害。一个确定性的丧失，不论大小，都是非常难受的。</p>
<p>人会上瘾，是对确定性满足感的依赖。</p>
</blockquote>
<p>做一个产品，就是我要做一个东西，让它成为某些人生活中、工作中可以确定依赖的存在。看一个人，则是我知道对方想成为一个什么样的存在，我是不是认同他想要的存在感。并且站在这个人的立场，接纳这个人的瑕疵，帮助他，成就他。</p>
<blockquote>
<p>用户研究，重要的不是零散地收集数据，拿数据证明自己的对错，而是建立一个有代表性的故事。</p>
</blockquote>
<p>同样适用科研，为了证明你的假设而收集数据，略显耍流氓！</p>
<blockquote>
<p>一个企业成就于自己不同部门和它依附价值网之间，资源与资金的输入输出。但它赖以存在的价值网，也会锁死这家企业。</p>
</blockquote>
<p>人是社会关系的总和，你的社会性既可以塑造你，同时也可以限制和束缚你。</p>
<h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><ul>
<li>存在感之于人就好像生存之于动物一样，是触发情绪和推动行动的开关</li>
<li>优秀的人才会有几个特性：敏感，不能忍，有动手优化的能力。</li>
<li>要么做一个让人愉悦到爆爽的产品，要么做一个可以帮人抵御恐惧的产品。</li>
<li>每个人的痛点都是他的恐惧，恐惧就是痛点。</li>
<li>一个产品要做到的就是迎合用户潜意识下的选择。</li>
<li>基于意识与人交流，其实是高防御模式。基于意识清醒的交流，达成交易的唯一方式，就是让对方清晰地感受到一点——“我占了便宜”。</li>
<li>角色化生存就是我们真实的生存处境，但是只有去角色化地认识、沟通、交互、你才能够得到真正的感情。</li>
<li>最悲催的人生，就是在一个看上去常态的面上，做一个勤奋的点，其实这个面附着的经济体正在下沉。（穷人勤奋的一生）</li>
<li>胜与不胜在于彼，败与不败在于己。</li>
<li>求之于势，不责于人。</li>
<li>一个人要做成一件事情，其本质上不是在于你有多强，而是你要顺势而为，于万仞之上推千钧之石。（基于“点”的评估，其实每块石头都是一样的，但是位置不同，势能不同。）</li>
<li>你对自己的存在战略设计是什么？你能存在，不是因为你厉害，而是别人需要你，别人能持续依赖你。</li>
<li>与其更好，不如不同。</li>
<li>人为什么要说话？说话就是咒语。舒舒服服的，干嘛要说话？说话是为了驱动别人，驱动世界。</li>
<li>靠套路成不了高手。</li>
</ul>
<p><img src="/images/level_4.jpg" alt="level_4"><br><img src="/images/dot.jpg" alt="dot"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;code&gt;产品能力&lt;/code&gt;就是训练一个人：判断信息，抓住要点，整合有限的资源，把自己的价值打包成一个产品向世界交付，并且获得回报。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>我的2017记</title>
    <link href="http://www.phoebepan.cn/2018/01/01/summary2017/"/>
    <id>http://www.phoebepan.cn/2018/01/01/summary2017/</id>
    <published>2018-01-01T07:30:16.000Z</published>
    <updated>2018-01-01T22:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong>2017年度关键词：</strong><br><code>遇见</code><br><code>职业规划</code><br><code>告别单身</code><br><strong>2018新年愿望：</strong><br>顺利毕业，走向社会快速成长，适应新角色，走好新阶段，谈场不分手的恋爱。<br><img src="/images/17_18.JPG" alt="17_18"></p>
</blockquote>
<a id="more"></a>
<p>2017年已经过去了，回顾这一年，看看自己做了些什么，有了哪些改变？</p>
<h3 id="小成就"><a href="#小成就" class="headerlink" title="小成就"></a>小成就</h3><ol>
<li>坚持看书并写读后感，兼听则明，遇见更大的世界；</li>
<li>年前健身一个多月，瘦了十斤（可惜没有继续坚持），见过瘦瘦的自己；</li>
<li>秋招找到了一份还算满意的工作，越努力，越幸运；</li>
<li>懂得爱，包括亲情，友情，爱情，有颗柔软强大的小心脏，愿意为我爱的人遮风挡雨。</li>
</ol>
<h3 id="遇见更大的世界"><a href="#遇见更大的世界" class="headerlink" title="遇见更大的世界"></a>遇见更大的世界</h3><p>年前，给自己定的小目标，每周看完一本书，然而真正执行时，很惭愧，全年下来，也就读了二十来本（当然不包括专业书籍），平均下来，两三周才读完一本书。<br>读书这件小事，真的是谁读谁知道，有时作者一个想法跟你产生共鸣，或者说出你未曾察觉的现象，那种美好，真的是很奇妙的存在。阅读让我更加自信，不自我攻击，内心很平和，对自己有正确的判断和评估，不妄自菲薄，也不骄傲自大，而是我知道，这件事情我可以，我就争取去做，这样带来的结果是，我整个人沉静了下来，不急不躁，更容易感受到幸福。<br>兼听则明，有视野才有思考，书籍是我们每个个体与外界沟通的桥梁，18年的自己，可以再多读点其他领域的书哦，Get out of comfort zone！<br><img src="/images/quanliyouxi.JPG" alt="quanliyouxi"></p>
<h3 id="遇见过轻盈的自己"><a href="#遇见过轻盈的自己" class="headerlink" title="遇见过轻盈的自己"></a>遇见过轻盈的自己</h3><p>话说，减肥，我都嚷嚷着快两年了，然而总是反反复复，一次次，减了没保持住，而宣告失败。<br>年前痛下决定，每天坚持去健身房运动近两小时，从跑步，游泳到器械训练，坚持两个月，每周打卡四五次，外加严格控制饮食，得到的反馈是，体重掉了十斤，皮肤超好，每天精神很充沛！<br>健身，减肥，真的就是6个字，管住嘴，迈开腿，对于我来讲，最大的障碍是，动力不足，每次都会被家人劝说之下，管不住嘴。<br>希望18年的自己可以真的做好这件事，遇见更美好的自己。</p>
<h3 id="遇见AI"><a href="#遇见AI" class="headerlink" title="遇见AI"></a>遇见AI</h3><p>回顾2017年，科技圈发生了太多令人意想不到的事情。比特币热潮，FinTech，汽车电动化，手机全面屏正在上演，人工智能、无人驾驶火遍全球……无声的硝烟，构成了2017年科技圈的主旋律。<br>然而，这些于我来说，很遥远，都是大佬们在鼓吹未来的美好。那么对于我来讲，接地气的是，我找到一份相关的工作。<br>其实，打小我就是好奇宝宝，喜欢琢磨新事物，有股不服输的劲。从对机器学习的感兴趣，到自学一系列的课程，看了很多相关的文献，最终决定放弃医疗AI这一蓝海领域，转入完全陌生的金融/银行业，从事数据挖掘工作。<br><img src="/images/IMG_0378.JPG" alt="IMG_0378"><br>从秋招一开始，我投的的岗位全是算法工程师，AI工程师等职位，但理想总是丰满的，现实却很骨感，上海本来互联网大厂就不多，再加上，AI相关的职位相对开发等招的人就少，应聘的却很多，据说百度今年面试机器学习岗的队伍是面试开发队伍的两倍长。就我自己的一次面试体验来说，面到XX大厂终面时，尴尬的是，这个职位，周围全是男生，而且还都是隔壁交大居多，我一个华师的半路出家，二三十人，最后只需要那么几个人，毫无悬念的成了领跑的。<br>尽人事，听天命，是我一贯奉行的原则。整个求职期下来，痛并充实着，收到的正式offer大大小小有5家，但最终基于行业，工资，个人发展等考虑，选择目前我认为相对来说性价比较高的招行，期待18年的自己能够在事业上有所成长！<br><img src="/images/IMG_0047.PNG" alt="IMG_0047"></p>
<h3 id="遇见Ta"><a href="#遇见Ta" class="headerlink" title="遇见Ta"></a>遇见Ta</h3><p>Life is like a box of chocolates, you never know what you’re going to get.<br>遇见你，是最美好的意外。<br>2017年小尾巴的日子间，我告别了25年不将就的单身生活。目前我能想到对你最好的评价是：成熟而不世故、聪明而保有善良，真诚坦荡。<br>不知为何，听了你的故事，被你的真诚打动，好想抱抱你，幻想多年前我就是那个机器猫，陪你度过一个个关卡，帮你升级打怪，保护你！但命运让我们现在相遇，我相信你说的冥冥之中，这就是命。现在我能想到最浪漫的事，被你牵着手，一起走下去！<br>2018年，谈场不分手的恋爱，一次就好。希望自己为了你再勇敢一点，有我的未来，你更加快乐！第一次做别人的女友，还请多多关照呦～<br><img src="/images/onetime.jpg" alt="onetime"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;strong&gt;2017年度关键词：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;遇见&lt;/code&gt;&lt;br&gt;&lt;code&gt;职业规划&lt;/code&gt;&lt;br&gt;&lt;code&gt;告别单身&lt;/code&gt;&lt;br&gt;&lt;strong&gt;2018新年愿望：&lt;/strong&gt;&lt;br&gt;顺利毕业，走向社会快速成长，适应新角色，走好新阶段，谈场不分手的恋爱。&lt;br&gt;&lt;img src=&quot;/images/17_18.JPG&quot; alt=&quot;17_18&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>深度学习——权值初始化</title>
    <link href="http://www.phoebepan.cn/2017/09/04/Initialization/"/>
    <id>http://www.phoebepan.cn/2017/09/04/Initialization/</id>
    <published>2017-09-04T07:30:16.000Z</published>
    <updated>2017-09-20T09:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>本博文属于<a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="external">deeplearning.ai</a>学习笔记总结系列，DL中<code>权值初始化</code>也有很多trick，不同的初始化方法可能会得到不同的结果，随机初始化需要打破symmetry，确保每个隐藏层的units可以学习不同的东西，同时初始化的权值不能过大，通常在ReLU激活函数下，He初始化方法能起到不错的效果。</p>
</blockquote>
<a id="more"></a>
<p>NN权值初始化最常用的方法是随机数进行初始化，代码表示就是<code>W=np.random.randn(shape)</code>，其中<code>randn</code>从均值0，标准差为1的标准正太分布中采样，这种初始化有一个问题就是，<strong>每一个units输出值的方差会随着units输入样本数量而增加。</strong></p>
<p>为了解决该问题，提出了<code>He initialization</code>、<code>Xavier initialization</code>等，根据Ng老师的讲解，他推荐在使用ReLU激活函数时，考虑He initialization方法进行初始化，代码表示，即为，<code>WL=np.random.randn(shape)*np.sqrt(2/n)</code>；使用tanh激活函数时，考虑Xavier initialization方法进行初始化，代码表示，即为，<code>WL=np.random.randn(shape)*np.sqrt(1/n)</code>，这里的<code>n</code>指进入某一units的输入个数。如果你比较困惑为什么要乘上$ \sqrt{\frac{1}{n}} $，可以阅读<a href="http://www.cnblogs.com/liujshi/p/5616171.html" target="_blank" rel="external">这篇博文</a>。</p>
<p>想要直观的感受初始化的效果，可以通过这个栗子体会下，链接<a href="https://github.com/phoebepx/DeepLearningStudyNodes/blob/master/Initialization.ipynb" target="_blank" rel="external">Here</a>。</p>
<p>总之，较差的初始化可能会引发梯度爆炸/消失，训练变慢等问题，掌握这些trick，避免入坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;本博文属于&lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;deeplearning.ai&lt;/a&gt;学习笔记总结系列，DL中&lt;code&gt;权值初始化&lt;/code&gt;也有很多trick，不同的初始化方法可能会得到不同的结果，随机初始化需要打破symmetry，确保每个隐藏层的units可以学习不同的东西，同时初始化的权值不能过大，通常在ReLU激活函数下，He初始化方法能起到不错的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>深度学习——Dropout</title>
    <link href="http://www.phoebepan.cn/2017/09/03/dropout/"/>
    <id>http://www.phoebepan.cn/2017/09/03/dropout/</id>
    <published>2017-09-03T07:30:16.000Z</published>
    <updated>2017-09-20T14:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>本博文属于<a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="external">deeplearning.ai</a>学习笔记总结系列，主要是自己对<code>Dropout</code>的简单理解。将围绕下面三个问题展开：<br><strong>是什么？主要过程是怎样？</strong><br><strong>为什么能起到正则化作用？</strong><br><strong>效果怎样？</strong></p>
</blockquote>
<a id="more"></a>
<h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>假设需训练下图左图这样一个NN，通常的流程是，首先将输入层通过网络经过Forward Propagation然后将误差Backward Propagation更新参数，训练网络，进行学习。使用Dropout后过程变成：</p>
<ol>
<li>随机（临时）删掉网络中隐藏层的一部分units，如下图有图所示（虚线为部分临时删除的units）；</li>
<li>Forward Propagation，然后把损失通过修改的网络Backward Propagation，临时保留下来的units参数得到了更新；</li>
<li>重复上面过程：<blockquote>
<p>恢复被删除的units（被删除的units保持原样，保留的units参数得到了更新）；<br>从隐藏层随机选择一部分的units临时删掉，重复第2步。</p>
</blockquote>
</li>
</ol>
<p>不断重复这一过程。<br><img src="/images/dropout.png" alt="dropout"></p>
<h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><p>为什么dropout可以解决过拟合，达到正则化的效果呢？</p>
<ul>
<li>每一次迭代，相当于一个更小的NN上训练学习，整个的dropout过程就相当于对很多的不同的小的NN取平均，这样综合取平均可以有效防止过拟合问题；</li>
<li><strong>随机</strong>knock out units，减少网络对任意feature的依赖，这样权值更新不在依赖于某一隐含节点，增强鲁棒性，减少权重，从而达到类似L2的正则化效果。</li>
</ul>
<h3 id="效果怎样？"><a href="#效果怎样？" class="headerlink" title="效果怎样？"></a>效果怎样？</h3><p>具体效果，可以参考我的课程作业，<a href="https://github.com/phoebepx/DeepLearningStudyNodes/blob/master/Regularization.ipynb" target="_blank" rel="external">链接</a></p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>缺点就是会明显增加训练时间，因为引入dropout之后相当于每次只是训练的原先网络的一个子网络，为了达到同样的精度需要的训练次数会增多。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大型网络但是数据集缺少的时候可以使用dropout防止过拟合，对于小型网络或者说不缺数据集的网络不推荐使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;本博文属于&lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;deeplearning.ai&lt;/a&gt;学习笔记总结系列，主要是自己对&lt;code&gt;Dropout&lt;/code&gt;的简单理解。将围绕下面三个问题展开：&lt;br&gt;&lt;strong&gt;是什么？主要过程是怎样？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;为什么能起到正则化作用？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;效果怎样？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>搭建神经网络</title>
    <link href="http://www.phoebepan.cn/2017/09/02/build%20a%20nn/"/>
    <id>http://www.phoebepan.cn/2017/09/02/build a nn/</id>
    <published>2017-09-02T07:30:16.000Z</published>
    <updated>2017-09-19T14:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Andrew Ng老师在Coursera的deeplearning.ai课程，真心很赞，一口气学完了目前仅有的三门课程，讲解及其细致，醍醐灌顶。Ng老师说，<code>Data</code>、<code>Algorithms</code>、<code>Computation</code>这三方面催生了DL的飞速发展，很是赞同，如果你的数据量不到一定程度，计算能力不够，算法优化不够，那么深度学习就等于纸上谈兵，不会落地，而解决实际问题。Deeop learning 犹如<strong>新电力</strong>，将改变各行各业，带来新的发展机遇。本文是该课程第一门课的学习笔记，主要记录下搭建一个神经网络(NN)的过程及需要注意的问题，欢迎指正！</p>
</blockquote>
<a id="more"></a>
<h3 id="build-a-NN-算法："><a href="#build-a-NN-算法：" class="headerlink" title="build a NN 算法："></a>build a NN 算法：</h3><ol>
<li>定义NN的结构（隐藏层神经元个数，层数，激活函数）</li>
<li>初始化模型的参数</li>
<li>LOOP：<blockquote>
<p>执行Forward propagation；<br>计算损失(Loss)；<br>执行Backward propagation，得到梯度(gradients)；<br>更新参数(gradient descent)；</p>
</blockquote>
</li>
</ol>
<h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="/images/final outline.png" alt="final outline"></p>
<h3 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h3><p><img src="/images/shallow.png" alt="shallow"><br>根据Ng老师的讲解，如上图这样有一个隐藏层的2层NN，初始化$ w^{[1]} $时，需要注意打破symmetric，隐藏层的参数可以这样初始化<code>W1=np.random.randn((2,2))*0.01，b1=np.zeros((2,1))</code>，之所以乘0.01是为了使得初始的参数尽量小，使得梯度变化明显，学习更加快速。</p>
<h3 id="2层网络的BP过程"><a href="#2层网络的BP过程" class="headerlink" title="2层网络的BP过程"></a>2层网络的BP过程</h3><p><img src="/images/grad_summary.png" alt="grad_summary"></p>
<h3 id="不断实验更新过程"><a href="#不断实验更新过程" class="headerlink" title="不断实验更新过程"></a>不断实验更新过程</h3><p><img src="/images/itertive.png" alt="itertive"><br>课程提到，运用ML解决问题的过程是个不断实验，更新迭代的过程，<strong>多试才是王道</strong>。</p>
<h3 id="FP-amp-BP-参数更新过程"><a href="#FP-amp-BP-参数更新过程" class="headerlink" title="FP &amp; BP 参数更新过程"></a>FP &amp; BP 参数更新过程</h3><p><img src="/images/backprop_kiank.png" alt="backprop_kiank"></p>
<h3 id="Basic-‘recipe’-for-NN"><a href="#Basic-‘recipe’-for-NN" class="headerlink" title="Basic ‘recipe’ for NN"></a>Basic ‘recipe’ for NN</h3><p><img src="/images/bias_variance.png" alt="bias_variance"></p>
<p><strong>Node:</strong></p>
<blockquote>
<p>参考deeplearning.ai课程，链接<a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="external">Here</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Andrew Ng老师在Coursera的deeplearning.ai课程，真心很赞，一口气学完了目前仅有的三门课程，讲解及其细致，醍醐灌顶。Ng老师说，&lt;code&gt;Data&lt;/code&gt;、&lt;code&gt;Algorithms&lt;/code&gt;、&lt;code&gt;Computation&lt;/code&gt;这三方面催生了DL的飞速发展，很是赞同，如果你的数据量不到一定程度，计算能力不够，算法优化不够，那么深度学习就等于纸上谈兵，不会落地，而解决实际问题。Deeop learning 犹如&lt;strong&gt;新电力&lt;/strong&gt;，将改变各行各业，带来新的发展机遇。本文是该课程第一门课的学习笔记，主要记录下搭建一个神经网络(NN)的过程及需要注意的问题，欢迎指正！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>激活函数(Activation Function)</title>
    <link href="http://www.phoebepan.cn/2017/09/01/activation%20function/"/>
    <id>http://www.phoebepan.cn/2017/09/01/activation function/</id>
    <published>2017-09-01T07:30:16.000Z</published>
    <updated>2017-09-19T01:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>提到神经网络，就必然会聊到激活函数这一话题，常用的激活函数有：sigmoid、ReLU、tanh等，那么问题来了：</p>
<p> <strong>为什么需要激活函数？</strong><br> <strong>激活函数有哪些？有哪些特点？</strong><br> <strong>如何选用激活函数？</strong></p>
<p>本文基于这3个问题展开，欢迎指正！</p>
</blockquote>
<a id="more"></a>
<p><img src="/images/blog-nn.png" alt="activation function"></p>
<h3 id="激活函数的作用"><a href="#激活函数的作用" class="headerlink" title="激活函数的作用"></a>激活函数的作用</h3><p>激活函数的作用是能够在神经网络中加入一些非线性元素，使得NN能够更好地解决较复杂的问题。<br>基于此，激活函数通常有如下一些性质，<code>非线性</code>、<code>可微性</code>、<code>单调性</code>(单调，单层网络能保证是凸函数)、<code>f(x)≈x</code>。</p>
<h3 id="常用激活函数"><a href="#常用激活函数" class="headerlink" title="常用激活函数"></a>常用激活函数</h3><h4 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h4><p>曾被广泛使用，但由于自身缺陷，现很少使用，其定义为：<br>$$ f(x)= \frac{1}{1+e^{-x}} $$<br>函数对应图像如左图：<br><img src="/images/blog-sigmoid_relu.png" alt="sigmoid"></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>Sigmoid函数的输出映射在(0,1)之间，单调连续，输出范围有限，基于梯度优化会更稳定，可作为输出层；</li>
<li>求导容易。</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>容易产生梯度消失，导致网络变得很难学习；</li>
<li>输出不是以0为均值，导致后一层神经元输入是非0均值的信号。</li>
</ul>
<h4 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h4><p>与sigmoid很像，函数位于[-1,1]区间上，数学形式是sigmoid的变形：$$ tanh(x)=2sigmoid(2x)-1 = \frac{1-e^{-2x}}{1+e^{-2x}} $$ 函数对应上图右图，tanh是0均值的，实际应用中，tanh比sigmoid更好。</p>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul>
<li>比sigmoid函数收敛速度更快；</li>
<li>输出以0为均值（相比于sigmoid）。</li>
</ul>
<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>并没有改变sigmoid的最大问题——梯度消失。</p>
<h4 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h4><p>近几年受宠爱的激活函数，定义为：$$ y=  \begin{matrix}<br>0 &amp; (x\leq 0) \<br>, y= x &amp; (x&gt;0)<br>\end{matrix} $$<br>函数对应图像如下：<br><img src="/images/blog-relu.png" alt="relu"></p>
<h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ul>
<li>相比sigmoid和tanh，ReLU在SGD中能够<strong>快速收敛</strong>，如上图右图所示，在一个四层的卷积神经网络中，实线代表ReLU，虚线代表tanh，ReLU比tanh更快到达错误率0.25处。这一点可归因与ReLU是线性，且输出范围是无限的；</li>
<li>sigmoid和tanh涉及很多指数操作，ReLU实现更加简单；</li>
<li>有效缓解梯度消失；</li>
</ul>
<h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><p>ReLU神经元在训练中不可逆地死亡，e.g. 随着训练的进行，可能神经元死亡，权重无法更新，那么流经神经元的梯度从这一刻开始永远是0。<br><code>learning rate设为合适的较小值，可以减少发生该问题的频次。</code></p>
<h4 id="LReLU、PReLU与RReLU"><a href="#LReLU、PReLU与RReLU" class="headerlink" title="LReLU、PReLU与RReLU"></a>LReLU、PReLU与RReLU</h4><p>LReLU、PReLU中，定义为这样的激活函数：$$ y= \begin{matrix}<br>ax &amp; (x\leq 0) \<br>, y=x &amp; (x&gt;0)<br>\end{matrix} $$<br>，这里的a是一个很小的值，对应图像如下，<br><img src="/images/r_p_lReLU.png" alt="r_p_lReLU"></p>
<h4 id="其他激活函数"><a href="#其他激活函数" class="headerlink" title="其他激活函数"></a>其他激活函数</h4><p><img src="/images/blog-ac1.png" alt="blog-ac1"></p>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>关于激活函数的选取，目前没有定论，实践过程中更多需要结合实际问题，综合考虑不同激活函数优缺点。<br>根据Andrew Ng的deeplearning.ai课程讲解，他建议最好不要在隐藏层使用sigmoid，可试试tanh；如果使用ReLU，一定要小心设置learning rate，也可以试试Leaky ReLU、PReLU等。<br><strong>Tips:</strong><br>TensorFlow里有现成的方法可供使用。<a href="https://www.tensorflow.org/versions/r0.12/api_docs/python/nn/activation_functions_" target="_blank" rel="external">激活函数相关TensorFlow的官方文档</a></p>
<p>参考文献</p>
<ol>
<li><a href="http://blog.csdn.net/cyh_24/article/details/50593400" target="_blank" rel="external">http://blog.csdn.net/cyh_24/article/details/50593400</a></li>
<li><a href="http://www.cnblogs.com/rgvb178/p/6055213.html" target="_blank" rel="external">http://www.cnblogs.com/rgvb178/p/6055213.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;提到神经网络，就必然会聊到激活函数这一话题，常用的激活函数有：sigmoid、ReLU、tanh等，那么问题来了：&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;为什么需要激活函数？&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;激活函数有哪些？有哪些特点？&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;如何选用激活函数？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文基于这3个问题展开，欢迎指正！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="http://www.phoebepan.cn/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>Python——itertools模块</title>
    <link href="http://www.phoebepan.cn/2017/08/04/itertools/"/>
    <id>http://www.phoebepan.cn/2017/08/04/itertools/</id>
    <published>2017-08-04T07:30:16.000Z</published>
    <updated>2017-08-20T03:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>迭代器的特点是：<strong>惰性求值</strong>，即只有迭代至某一值时，才会计算。这一特点使得迭代器非常适合于遍历大文件等，避免一次性存储至内存。Python内置的<code>itertools</code>模块包含了用于产生不同类型迭代器的函数或类。本篇笔记简单记录下该模块能解决的问题。</p>
</blockquote>
<a id="more"></a>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><code>itertools</code>模块提供的迭代器函数有以下几种类型。</p>
<ul>
<li><strong>无限迭代器</strong>，生成一个无限序列；</li>
<li><strong>有限迭代器</strong>，接收一个或多个序列作为参数，进行组合、分组和过滤等；</li>
<li><strong>组合生成器</strong>，序列的排列，组合等。</li>
</ul>
<h3 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h3><h4 id="itertools-count-start-0-step-1"><a href="#itertools-count-start-0-step-1" class="headerlink" title="itertools.count(start=0, step=1)"></a>itertools.count(start=0, step=1)</h4><p>创建一个迭代器，生成从0开始，step为1的连续整数；<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> izip(count(<span class="number">1</span>), [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="string">'''</span></div><div class="line">(1, 'a')</div><div class="line">(2, 'b')</div><div class="line">(3, 'c')</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<h4 id="itertools-cycle-iterable"><a href="#itertools-cycle-iterable" class="headerlink" title="itertools.cycle(iterable)"></a>itertools.cycle(iterable)</h4><p>创建一个迭代器，对iterable中的元素反复执行循环操作；<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cycle([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</div><div class="line">    i += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">10</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> (i, item)</div><div class="line"><span class="string">'''</span></div><div class="line">(1, 'a')</div><div class="line">(2, 'b')</div><div class="line">(3, 'c')</div><div class="line">(4, 'a')</div><div class="line">(5, 'b')</div><div class="line">(6, 'c')</div><div class="line">(7, 'a')</div><div class="line">(8, 'b')</div><div class="line">(9, 'c')</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<h4 id="itertools-repeat-object-times"><a href="#itertools-repeat-object-times" class="headerlink" title="itertools.repeat(object[, times])"></a>itertools.repeat(object[, times])</h4><p>创建一个迭代器，重复生成object，times指定重复次数。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat(<span class="string">'over-and-over'</span>, <span class="number">4</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="string">'''</span></div><div class="line">over-and-over</div><div class="line">over-and-over</div><div class="line">over-and-over</div><div class="line">over-and-over</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<h3 id="有限迭代器"><a href="#有限迭代器" class="headerlink" title="有限迭代器"></a>有限迭代器</h3><h4 id="itertools-chain-iterables"><a href="#itertools-chain-iterables" class="headerlink" title="itertools.chain(*iterables)"></a>itertools.chain(*iterables)</h4><p>接收多个可迭代对象作为参数，将它们『连接』起来，作为一个新的迭代器返回；<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="string">'''</span></div><div class="line">1</div><div class="line">2</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<h4 id="itertools-compress-data-selectors"><a href="#itertools-compress-data-selectors" class="headerlink" title="itertools.compress(data, selectors)"></a>itertools.compress(data, selectors)</h4><p>可用于对数据进行筛选，当 selectors 的某个元素为 true 时，则保留 data 对应位置的元素，否则去除；<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</div><div class="line">list(compress(<span class="string">'ABCDEF'</span>, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]))</div><div class="line"></div><div class="line"><span class="comment"># ['A', 'B', 'D', 'F']</span></div></pre></td></tr></table></figure></p>
<h4 id="itertools-dropwhile-predicate-iterable"><a href="#itertools-dropwhile-predicate-iterable" class="headerlink" title="itertools.dropwhile(predicate, iterable)"></a>itertools.dropwhile(predicate, iterable)</h4><p>对于 iterable 中的元素，如果predicate(item)为true，则丢弃该元素，否则返回该项及所有后续项；<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile</div><div class="line">list(dropwhile(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>]))</div><div class="line"><span class="comment">#[6, 2, 1]</span></div></pre></td></tr></table></figure></p>
<h4 id="itertools-groupby-iterable-key"><a href="#itertools-groupby-iterable-key" class="headerlink" title="itertools.groupby(iterable[, key])"></a>itertools.groupby(iterable[, key])</h4><p>用于对序列进行分组，iterable 是一个可迭代对象，keyfunc 是分组函数，用于对 iterable 的连续项进行分组，返回一个 (key, sub-iterator) 的迭代器。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</div><div class="line">data = [<span class="string">'a'</span>, <span class="string">'bb'</span>, <span class="string">'ccc'</span>, <span class="string">'dd'</span>, <span class="string">'eee'</span>, <span class="string">'f'</span>]</div><div class="line"><span class="keyword">for</span> key, value_iter <span class="keyword">in</span> groupby(data, len):    </div><div class="line">    <span class="keyword">print</span>（key,list(value_iter)）</div><div class="line"><span class="string">'''</span></div><div class="line">1 : ['a']</div><div class="line">2 : ['bb']</div><div class="line">3 : ['ccc']</div><div class="line">2 : ['dd']</div><div class="line">3 : ['eee']</div><div class="line">1 : ['f']</div><div class="line">'''</div></pre></td></tr></table></figure></p>
<h4 id="itertools-ifilter-predicate-iterable"><a href="#itertools-ifilter-predicate-iterable" class="headerlink" title="itertools.ifilter(predicate, iterable)"></a>itertools.ifilter(predicate, iterable)</h4><p>将 iterable 中 function(item) 为 True的元素组成一个迭代器返回，如果 function 是 None，则返回 iterable 中所有计算为 True 的项。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> ifilter</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(ifilter(<span class="keyword">lambda</span> x: x &lt; <span class="number">6</span>, range(<span class="number">10</span>)))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(ifilter(<span class="keyword">None</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>]))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<h4 id="itertools-islice-iterable-stop"><a href="#itertools-islice-iterable-stop" class="headerlink" title="itertools.islice(iterable, stop)"></a>itertools.islice(iterable, stop)</h4><p> 是切片选择，start 是开始索引，stop 是结束索引，step 是步长，start 和 step 可选。<br> e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> count, islice</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(islice([<span class="number">10</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>], <span class="number">5</span>))</div><div class="line">[<span class="number">10</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(islice(count(), <span class="number">6</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure></p>
<h4 id="itertools-imap-function-iterables"><a href="#itertools-imap-function-iterables" class="headerlink" title="itertools.imap(function, *iterables)"></a>itertools.imap(function, *iterables)</h4><p>类似于<code>map</code>操作<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> imap</div><div class="line">list(imap(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</div><div class="line"><span class="comment"># ['1', '2', '3', '4']</span></div></pre></td></tr></table></figure></p>
<h4 id="itertools-tee-iterable-n-2"><a href="#itertools-tee-iterable-n-2" class="headerlink" title="itertools.tee(iterable[, n=2])"></a>itertools.tee(iterable[, n=2])</h4><p>从iterable创建n个独立的迭代器，以元组的形式返回。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> tee</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tee(<span class="string">'abcd'</span>)   <span class="comment"># n 默认为 2，创建两个独立的迭代器</span></div><div class="line">(&lt;itertools.tee object at <span class="number">0x1049957e8</span>&gt;, &lt;itertools.tee object at <span class="number">0x104995878</span>&gt;)</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iter1, iter2 = tee(<span class="string">'abcde'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(iter1)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(iter2)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</div></pre></td></tr></table></figure></p>
<h4 id="itertools-takewhile-predicate-iterable"><a href="#itertools-takewhile-predicate-iterable" class="headerlink" title="itertools.takewhile(predicate, iterable)"></a>itertools.takewhile(predicate, iterable)</h4><p>如果 predicate(item) 为 true，则保留该元素，只要 predicate(item) 为 false，则立即停止迭代。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> takewhile</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(takewhile(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>]))</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure></p>
<h4 id="itertools-izip-iterables"><a href="#itertools-izip-iterables" class="headerlink" title="itertools.izip(*iterables)"></a>itertools.izip(*iterables)</h4><p>用于将多个可迭代对象对应位置的元素作为一个元组，将所有元组『组成』一个迭代器。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> izip</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> izip(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> item</div><div class="line">...</div><div class="line">(<span class="string">'A'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'B'</span>, <span class="string">'y'</span>)</div></pre></td></tr></table></figure></p>
<p><code>izip_longest</code>跟<code>izip</code>类似，<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> izip_longest(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>, fillvalue=<span class="string">'-'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> item</div><div class="line">...</div><div class="line">(<span class="string">'A'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'B'</span>, <span class="string">'y'</span>)</div><div class="line">(<span class="string">'C'</span>, <span class="string">'-'</span>)</div><div class="line">(<span class="string">'D'</span>, <span class="string">'-'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="组合生成器"><a href="#组合生成器" class="headerlink" title="组合生成器"></a>组合生成器</h3><h4 id="itertools-product-iterables-repeat"><a href="#itertools-product-iterables-repeat" class="headerlink" title="itertools.product(*iterables[, repeat])"></a>itertools.product(*iterables[, repeat])</h4><p>用于求多个可迭代对象的笛卡尔积，它跟嵌套的 for 循环等价。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> product</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> product(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> item</div><div class="line">...</div><div class="line">(<span class="string">'A'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'A'</span>, <span class="string">'y'</span>)</div><div class="line">(<span class="string">'B'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'B'</span>, <span class="string">'y'</span>)</div><div class="line">(<span class="string">'C'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'C'</span>, <span class="string">'y'</span>)</div><div class="line">(<span class="string">'D'</span>, <span class="string">'x'</span>)</div><div class="line">(<span class="string">'D'</span>, <span class="string">'y'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="itertools-permutations-iterable-r"><a href="#itertools-permutations-iterable-r" class="headerlink" title="itertools.permutations(iterable[, r])"></a>itertools.permutations(iterable[, r])</h4><p>生成一个排列，r指定生成排列的元素的长度，未指定，则默认为iterable长度。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(permutations(<span class="string">'ABC'</span>, <span class="number">2</span>))</div><div class="line">[(<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'A'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'A'</span>), (<span class="string">'C'</span>, <span class="string">'B'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(permutations(<span class="string">'ABC'</span>))</div><div class="line">[(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>), (<span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>), (<span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>)]</div></pre></td></tr></table></figure></p>
<h4 id="itertools-combinations-iterable-r"><a href="#itertools-combinations-iterable-r" class="headerlink" title="itertools.combinations(iterable, r)"></a>itertools.combinations(iterable, r)</h4><p>求序列的组合，r指定生成组合元素长度<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(combinations(<span class="string">'ABC'</span>, <span class="number">2</span>))</div><div class="line">[(<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>)]</div></pre></td></tr></table></figure></p>
<p><code>combinations_with_replacement</code> 和 <code>combinations</code> 类似，但它生成的组合包含自身元素。<br>e.g.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations_with_replacement</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>))</div><div class="line">[(<span class="string">'A'</span>, <span class="string">'A'</span>), (<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'B'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'C'</span>)]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;迭代器的特点是：&lt;strong&gt;惰性求值&lt;/strong&gt;，即只有迭代至某一值时，才会计算。这一特点使得迭代器非常适合于遍历大文件等，避免一次性存储至内存。Python内置的&lt;code&gt;itertools&lt;/code&gt;模块包含了用于产生不同类型迭代器的函数或类。本篇笔记简单记录下该模块能解决的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.phoebepan.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.phoebepan.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>定向广告到实时竞价广告</title>
    <link href="http://www.phoebepan.cn/2017/08/03/rtb/"/>
    <id>http://www.phoebepan.cn/2017/08/03/rtb/</id>
    <published>2017-08-03T07:30:16.000Z</published>
    <updated>2017-08-13T07:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>相比较于搜索广告，凡是浏览者没有主动输入搜索词的场景里面的广告，都可以叫做“非搜索广告”，即情景广告。本篇笔记包含非搜索广告的几种场景，以及针对定向广告的痛点发展而来的实时竞价广告。</p>
</blockquote>
<a id="more"></a>
<h3 id="定向广告"><a href="#定向广告" class="headerlink" title="定向广告"></a>定向广告</h3><p><img src="/images/dingxiangad.png" alt="dingxiangad"></p>
<p><strong>痛点：</strong>定向广告下，广告主的广告无法找到与其最相匹配的流量进行投放，大量媒体流量也无法找到最能实现其真实价值的广告和广告主，互联网的流量资源得不到合理和有效的配置。</p>
<h3 id="实时广告竞价-RTB"><a href="#实时广告竞价-RTB" class="headerlink" title="实时广告竞价(RTB)"></a>实时广告竞价(RTB)</h3><p>核心：建立一种流量交换的协议，使得媒体和广告联盟可以向全网范围的广告主提供其尚未售出的流量，为自己带来更高收益的同时，也为广告主提供了更多的选择，提高了他们的广告投放效果与投资回报率。<br>实时广告竞价从根本上解决了展示广告需求和供给方之间的矛盾，用市场化的规则使得资源达到了最优化的配置。</p>
<p><img src="/images/rtb.png" alt="rtb"></p>
<p>参考书目：《互联网广告算法和系统实践》</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;相比较于搜索广告，凡是浏览者没有主动输入搜索词的场景里面的广告，都可以叫做“非搜索广告”，即情景广告。本篇笔记包含非搜索广告的几种场景，以及针对定向广告的痛点发展而来的实时竞价广告。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ComputationalAdvertising" scheme="http://www.phoebepan.cn/categories/ComputationalAdvertising/"/>
    
    
      <category term="计算广告" scheme="http://www.phoebepan.cn/tags/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>搜索广告</title>
    <link href="http://www.phoebepan.cn/2017/08/02/searchad/"/>
    <id>http://www.phoebepan.cn/2017/08/02/searchad/</id>
    <published>2017-08-02T07:30:16.000Z</published>
    <updated>2017-08-12T03:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>搜索广告指，在搜索过程中，搜索引擎推送给我们的互联网广告。参考Google财报，绝大部分收入来自于搜索广告。一般来说，当用户输入一个查询后，广告系统会经过：广告检索、广告排序、流量分配，三个模块为用户提供广告。</p>
</blockquote>
<a id="more"></a>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/images/searchad.png" alt="searchad"></p>
<h3 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h3><p>模型获得一个训练样本<x,y>，利用一个迭代方法更新模型变量，使得当前期望loss最小。</x,y></p>
<blockquote>
<p>实际使用中，特征向量高维稀疏性，需要采用特征缩减技术进行特征稀疏化处理，可使用L1泛数加入目标函数。<br>工业界需要CTR预估模型具有自适应性，能够迅速适应数据变化。如，逻辑回归模型采用随机梯度下降法就具备在线学习能力。</p>
</blockquote>
<p>SGD简单易行，但很难得到特征向量稀疏结果，且精度低，收敛慢，Google提出的FTRL-Proximal方法可以得到稀疏性更好地训练结果。FTRL算法融合了RDA算法能产生稀疏模型的特性和SGD算法能产生更有效模型的特性，在处理诸如LR之类的非光滑正则化项的凸优化问题上性能更出色。算法详细理解参考博文<sup>1</sup>。<br><img src="/images/ftrl.png" alt="ftrl"></p>
<p>除了运用L1正则化降低特征维度，其他常见的方法也可以降低特征维度，比如，</p>
<ul>
<li>泊松选择法，不同特征表中的新特征以P的概率接纳其进入特征表。</li>
</ul>
<p>参考文献：</p>
<ol>
<li><a href="http://vividfree.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/2015/12/05/understanding-FTRL-algorithm" target="_blank" rel="external">理解FTRL算法</a></li>
<li>《互联网广告算法和系统实践》</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;搜索广告指，在搜索过程中，搜索引擎推送给我们的互联网广告。参考Google财报，绝大部分收入来自于搜索广告。一般来说，当用户输入一个查询后，广告系统会经过：广告检索、广告排序、流量分配，三个模块为用户提供广告。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ComputationalAdvertising" scheme="http://www.phoebepan.cn/categories/ComputationalAdvertising/"/>
    
    
      <category term="计算广告" scheme="http://www.phoebepan.cn/tags/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>互联网广告简介</title>
    <link href="http://www.phoebepan.cn/2017/08/01/AdvertisingSummary/"/>
    <id>http://www.phoebepan.cn/2017/08/01/AdvertisingSummary/</id>
    <published>2017-08-01T07:30:16.000Z</published>
    <updated>2017-08-13T08:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>广告是由已确定的出资人通过各种媒介进行的有关产品（商品、服务和观点）的、有偿的、有组织的、综合的、劝服性的非人员的信息传播活动。<br>——William F.Arens</p>
</blockquote>
<p><code>Stay Hungry, Stay Foolish.</code> 从这篇笔记开始学习计算广告。<br><a id="more"></a></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>广告主、媒体、受众；三者博弈的生态系统。</p>
<h3 id="广告类型"><a href="#广告类型" class="headerlink" title="广告类型"></a>广告类型</h3><ul>
<li>条幅广告</li>
<li>邮件直接营销广告</li>
<li>富媒体广告</li>
<li>视频广告</li>
<li>文字链广告</li>
<li>社交广告</li>
<li>移动端广告</li>
</ul>
<h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><ul>
<li>前端引擎</li>
<li>检索引擎</li>
<li>实时点击率预估服务</li>
<li>广告主操作消息更新服务</li>
<li>用户行为数据收集和更新系统</li>
<li>特征提取和行为分析</li>
<li>反作弊系统</li>
<li>广告主后台(建立投放计划、增加投放创意、出价、设定投放参数、阅读报表等)</li>
<li>存储系统</li>
<li>计算系统(人群属性、意图挖掘；多特征任务)</li>
</ul>
<h3 id="机制设计"><a href="#机制设计" class="headerlink" title="机制设计"></a>机制设计</h3><blockquote>
<p>在经济学中，机制设计所讨论的问题是：在给定一个社会目标或者经济目标，以及自由选择、自愿交换的分散化决策条件下，能否并且怎样设计一个经济机制（包括制约条件、资源配置等），使得参与者的个人利益和设计者既定的目标一致。</p>
</blockquote>
<h4 id="广告机制设计"><a href="#广告机制设计" class="headerlink" title="广告机制设计"></a>广告机制设计</h4><blockquote>
<p>主要研究的是，如何针对不同广告受众，将广告平台上有限的展现位置分配给不同的广告，以达到某种既定的利益目标。</p>
</blockquote>
<h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>互联网广告算法的核心问题，是根据用户、环境、广告的全部有效信息，找到最合适的投放策略和模型，兼顾浏览者、广告主、广告平台的最大利益，并不断调整。</p>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/images/advertising.png" alt="advertising"></p>
<h3 id="广告系统的架构"><a href="#广告系统的架构" class="headerlink" title="广告系统的架构"></a>广告系统的架构</h3><p><img src="/images/ad_challenge.png" alt="ad_challenge"></p>
<p>参考书目：《互联网广告算法和系统实践》</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;广告是由已确定的出资人通过各种媒介进行的有关产品（商品、服务和观点）的、有偿的、有组织的、综合的、劝服性的非人员的信息传播活动。&lt;br&gt;——William F.Arens&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Stay Hungry, Stay Foolish.&lt;/code&gt; 从这篇笔记开始学习计算广告。&lt;br&gt;
    
    </summary>
    
      <category term="ComputationalAdvertising" scheme="http://www.phoebepan.cn/categories/ComputationalAdvertising/"/>
    
    
      <category term="计算广告" scheme="http://www.phoebepan.cn/tags/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>python中time模块</title>
    <link href="http://www.phoebepan.cn/2017/07/16/time/"/>
    <id>http://www.phoebepan.cn/2017/07/16/time/</id>
    <published>2017-07-16T07:30:16.000Z</published>
    <updated>2017-07-16T04:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在日常数据处理中，常常需要与时间打交道，python中与时间处理有关的模块有：<code>time</code>，<code>datetime</code>，<code>calendar</code>。本文主要介绍<strong>time</strong>模块。<br><img src="/images/time_convert.png" alt="time"></p>
</blockquote>
<a id="more"></a>
<p>Python中，表示时间的方式有：</p>
<ul>
<li>时间戳：通常来说，表示的是从<strong>1970年1月1日00:00:00</strong>开始按秒计算的偏移量；</li>
<li>格式化的时间字符串；</li>
<li>元组(struct_time)。</li>
</ul>
<p>time模块常用的几个函数：</p>
<h3 id="time-localtime"><a href="#time-localtime" class="headerlink" title="time.localtime()"></a>time.localtime()</h3><p>将一个时间戳转换成当前时区的struct_time。</p>
<h3 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h3><p>返回当前时间的时间戳。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;time.time()</div><div class="line"><span class="number">1500176454.689554</span></div></pre></td></tr></table></figure></p>
<h3 id="time-mktime"><a href="#time-mktime" class="headerlink" title="time.mktime()"></a>time.mktime()</h3><p>将一个struct_time转化为时间戳<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;time.mktime(time.localtime())</div><div class="line"><span class="number">1500176622.0</span></div></pre></td></tr></table></figure></p>
<h3 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h3><p>线程推迟运行，单位为秒</p>
<h3 id="time-strftime"><a href="#time-strftime" class="headerlink" title="time.strftime()"></a>time.strftime()</h3><p>把一个代表时间的元组转化为格式化的时间字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;time.strftime(<span class="string">'%Y-%m-%d %X'</span>,time.localtime())</div><div class="line"><span class="string">'2017-07-16 11:58:07'</span></div></pre></td></tr></table></figure></p>
<h3 id="time-strptime"><a href="#time-strptime" class="headerlink" title="time.strptime()"></a>time.strptime()</h3><p>格式化时间字符串转化成struct_time。与strftime()操作互逆。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;time.strptime('2017-07-16 11:58:07','%Y-%m-%d %X'')</div><div class="line">time.struct_time(tm_year=2017, tm_mon=7, tm_mday=16, tm_hour=11, tm_min=58, tm_sec=7, tm_wday=6, tm_yday=197, tm_isdst=-1)</div></pre></td></tr></table></figure></p>
<p>了解更多，请参考<a href="https://docs.python.org/3/library/time.html" target="_blank" rel="external">time模块的官方文档</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;在日常数据处理中，常常需要与时间打交道，python中与时间处理有关的模块有：&lt;code&gt;time&lt;/code&gt;，&lt;code&gt;datetime&lt;/code&gt;，&lt;code&gt;calendar&lt;/code&gt;。本文主要介绍&lt;strong&gt;time&lt;/strong&gt;模块。&lt;br&gt;&lt;img src=&quot;/images/time_convert.png&quot; alt=&quot;time&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.phoebepan.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.phoebepan.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Combination Sum</title>
    <link href="http://www.phoebepan.cn/2017/07/05/CombinationSum/"/>
    <id>http://www.phoebepan.cn/2017/07/05/CombinationSum/</id>
    <published>2017-07-05T07:30:16.000Z</published>
    <updated>2017-08-19T14:49:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本篇笔记主要记录，运用DFS或DP算法求解组合数相关题目。</p>
</blockquote>
<a id="more"></a>
<h3 id="Combination-Sum"><a href="#Combination-Sum" class="headerlink" title="Combination Sum"></a>Combination Sum</h3><p>题目来源：<a href="https://leetcode.com/problems/combination-sum/description/" target="_blank" rel="external">LeetCode 39</a></p>
<blockquote>
<p>For example, given candidate set [2, 3, 6, 7] and target 7,<br>A solution set is:<br>[<br>  [7],<br>  [2, 2, 3]<br>]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type candidates: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        res=[]</div><div class="line">        candidates.sort()</div><div class="line">        self.dfs(candidates,target,<span class="number">0</span>,[],res)</div><div class="line">        <span class="keyword">return</span>  res</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self,nums,target,index,path,res)</span>:</span></div><div class="line">        <span class="keyword">if</span> target&lt;<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> target==<span class="number">0</span>:</div><div class="line">            res.append(path)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(index,len(nums)):</div><div class="line">            self.dfs(nums,target-nums[i],i,path+[nums[i]],res)</div></pre></td></tr></table></figure>
<h3 id="Combination-Sum-II"><a href="#Combination-Sum-II" class="headerlink" title="Combination Sum II"></a>Combination Sum II</h3><p>题目来源：<a href="https://leetcode.com/problems/combination-sum-ii/description/" target="_blank" rel="external">LeetCode 40</a></p>
<blockquote>
<p>For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8,<br>A solution set is:<br>[<br>  [1, 7],<br>  [1, 2, 5],<br>  [2, 6],<br>  [1, 1, 6]<br>]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span><span class="params">(self, candidates, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type candidates: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        candidates.sort()</div><div class="line">        <span class="keyword">return</span> self.search(candidates, <span class="number">0</span> ,target)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, candidates, start, target)</span>:</span></div><div class="line">        <span class="keyword">if</span> target==<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> [[]]</div><div class="line">        res=[]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(start,len(candidates)):</div><div class="line">            <span class="keyword">if</span> i!=start <span class="keyword">and</span> candidates[i]==candidates[i<span class="number">-1</span>]:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> candidates[i]&gt;target:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> self.search(candidates, i+<span class="number">1</span>, target-candidates[i]):</div><div class="line">                res.append([candidates[i]]+r)</div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<h3 id="Combination-Sum-III"><a href="#Combination-Sum-III" class="headerlink" title="Combination Sum III"></a>Combination Sum III</h3><p>题目来源：<a href="https://leetcode.com/problems/combination-sum-iii/discuss/" target="_blank" rel="external">LeetCode 216</a></p>
<blockquote>
<p>Input: k = 3, n = 9<br>Output:[[1,2,6], [1,3,5], [2,3,4]]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type k: int</div><div class="line">        :type n: int</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        """</div><div class="line">        ans = []</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(start, cnt, sums, nums)</span>:</span></div><div class="line">            <span class="keyword">if</span> cnt &gt; k <span class="keyword">or</span> sums &gt; n:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">if</span> cnt == k <span class="keyword">and</span> sums == n:</div><div class="line">                ans.append(nums)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(start + <span class="number">1</span>, <span class="number">10</span>):</div><div class="line">                search(x, cnt + <span class="number">1</span>, sums + x, nums + [x])</div><div class="line">        search(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, [])</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h3 id="Combination-Sum-IV"><a href="#Combination-Sum-IV" class="headerlink" title="Combination Sum IV"></a>Combination Sum IV</h3><p>题目来源：<a href="https://leetcode.com/problems/combination-sum-iv/description/" target="_blank" rel="external">LeetCode 377</a></p>
<blockquote>
<p>nums = [1, 2, 3]<br>target = 4<br>The possible combination ways are:<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum4</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        nums, combs = sorted(nums), [<span class="number">1</span>] + [<span class="number">0</span>] * (target)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(target + <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">                <span class="keyword">if</span> num  &gt; i: <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num == i: combs[i] += <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> num  &lt; i: combs[i] += combs[i - num]</div><div class="line">        <span class="keyword">return</span> combs[target]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;本篇笔记主要记录，运用DFS或DP算法求解组合数相关题目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://www.phoebepan.cn/categories/Algorithms/"/>
    
    
      <category term="LeetCode" scheme="http://www.phoebepan.cn/tags/LeetCode/"/>
    
      <category term="Algorithms" scheme="http://www.phoebepan.cn/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>读《精要主义》</title>
    <link href="http://www.phoebepan.cn/2017/07/02/essentialer/"/>
    <id>http://www.phoebepan.cn/2017/07/02/essentialer/</id>
    <published>2017-07-02T07:30:16.000Z</published>
    <updated>2017-10-03T08:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>人生需要做减法，<strong>做少</strong>，<strong>做好</strong>。<br>时间和精力只用于有意义的事情。</p>
</blockquote>
<a id="more"></a>
<p><img src="/images/essentials.png" alt="essentials"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人生需要做减法，&lt;strong&gt;做少&lt;/strong&gt;，&lt;strong&gt;做好&lt;/strong&gt;。&lt;br&gt;时间和精力只用于有意义的事情。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Python——map()</title>
    <link href="http://www.phoebepan.cn/2017/07/01/python_mapreduce/"/>
    <id>http://www.phoebepan.cn/2017/07/01/python_mapreduce/</id>
    <published>2017-07-01T07:30:16.000Z</published>
    <updated>2017-08-19T08:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本篇笔记简单记录Python内建函数<code>map()</code>和<code>reduce()</code>函数几种使用示例。</p>
</blockquote>
<a id="more"></a>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>函数接收两个参数，一是函数，一是待处理的序列，<code>map</code>将传入的函数一次作用到序列的每一个元素，并把结果作为新的list返回。如：</p>
<h4 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g. 1"></a>e.g. 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add10</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+<span class="number">10</span></div><div class="line">temp = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>]</div><div class="line">map(add10,temp)</div><div class="line">print(temp)</div><div class="line"><span class="comment">#[12,14,18,19,11]</span></div></pre></td></tr></table></figure>
<h4 id="e-g-2"><a href="#e-g-2" class="headerlink" title="e.g. 2"></a>e.g. 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(str,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>]</div></pre></td></tr></table></figure>
<h4 id="e-g-3"><a href="#e-g-3" class="headerlink" title="e.g. 3"></a>e.g. 3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">return</span> a*<span class="number">10000</span> + b*<span class="number">100</span> + c</div><div class="line">list1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</div><div class="line">list2 = [<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</div><div class="line">list3 = [<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>]</div><div class="line">map(abc,list1,list2,list3)</div><div class="line"><span class="comment">#[114477, 225588, 336699]</span></div></pre></td></tr></table></figure>
<p>如果函数参数为<code>None</code>，自动假定一个<code>identity</code>函数，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">list1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</div><div class="line">map(<span class="keyword">None</span>,list1)</div><div class="line"><span class="comment">#[11, 22, 33]</span></div><div class="line">list1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</div><div class="line">list2 = [<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</div><div class="line">list3 = [<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>]</div><div class="line">map(<span class="keyword">None</span>,list1,list2,list3)</div><div class="line"><span class="comment">#[(11, 44, 77), (22, 55, 88), (33, 66, 99)]</span></div></pre></td></tr></table></figure></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce把一个函数<code>f</code>作用在一个序列上，函数<code>f</code>必须接受两个参数，reduce把结果继续和序列下一个元素做累积计算，功效等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>
<h4 id="e-g-1-1"><a href="#e-g-1-1" class="headerlink" title="e.g. 1"></a>e.g. 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*<span class="number">10</span> + y</div><div class="line"></div><div class="line">reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="comment">#13579</span></div></pre></td></tr></table></figure>
<h3 id="map-reduce实现str2int"><a href="#map-reduce实现str2int" class="headerlink" title="map reduce实现str2int"></a>map reduce实现str2int</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line">        temp=&#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</div><div class="line">        <span class="keyword">return</span> temp[s]</div><div class="line">    <span class="keyword">return</span> reduce(fn, map(char2num, s))</div></pre></td></tr></table></figure>
<p>进一步使用lambda函数简化成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*<span class="number">10</span>+y, map(char2num, s))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;本篇笔记简单记录Python内建函数&lt;code&gt;map()&lt;/code&gt;和&lt;code&gt;reduce()&lt;/code&gt;函数几种使用示例。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.phoebepan.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.phoebepan.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>读《刻意练习》</title>
    <link href="http://www.phoebepan.cn/2017/06/30/exercise/"/>
    <id>http://www.phoebepan.cn/2017/06/30/exercise/</id>
    <published>2017-06-30T07:30:16.000Z</published>
    <updated>2017-10-03T08:18:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>成为高手路线图：<strong>兴趣</strong>、<strong>认真</strong>、<strong>投入</strong>、<strong>创新</strong>。</p>
</blockquote>
<a id="more"></a>
<p><img src="/images/exercise.png" alt="exercise"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;成为高手路线图：&lt;strong&gt;兴趣&lt;/strong&gt;、&lt;strong&gt;认真&lt;/strong&gt;、&lt;strong&gt;投入&lt;/strong&gt;、&lt;strong&gt;创新&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>读《拖延心理学》</title>
    <link href="http://www.phoebepan.cn/2017/06/25/procrastination/"/>
    <id>http://www.phoebepan.cn/2017/06/25/procrastination/</id>
    <published>2017-06-25T07:30:16.000Z</published>
    <updated>2017-10-03T08:17:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>改善拖延，需要合理、耐心的对待。笔记涉及问题：什么是拖延？为什么拖延？拖延的后果？改善拖延准则？方法？</p>
</blockquote>
<a id="more"></a>
<p>拖延？</p>
<blockquote>
<p>非必要、后果有害的行为</p>
</blockquote>
<p>原因？</p>
<blockquote>
<p>不喜欢（兴趣缺失）；<br>完美主义，害怕失败(渴望成功)；<br>和他人的情绪对抗（抵触心理）；<br>逃避成功及其变化（缺乏自信）；<br>已经养成拖延习惯（惯性使然）。</p>
</blockquote>
<p>后果？</p>
<blockquote>
<p>事情完成未达预期；<br>自责、焦虑、无自信、影响睡眠和日常状态；<br>特别严重者发展为执行功能障碍或抑郁</p>
</blockquote>
<p>改善拖延准则？</p>
<blockquote>
<p>改变拖延的信条(适当控制)；<br>逐步控制拖延<br>有效的时间管理；</p>
</blockquote>
<p>改善拖延方法？</p>
<blockquote>
<ul>
<li>设立小的操作目标；</li>
<li>把大目标分解为小目标；</li>
<li>确定具体的时间，到了时间就做；</li>
<li>关注拖延的信号；</li>
<li>保护自己的时间；</li>
<li>合理面对困难，适当的休息；</li>
<li>留意自己的借口，如果真的有原因，适当降低目标，一定要<strong>做</strong>；</li>
<li>不要谴责自己；</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;改善拖延，需要合理、耐心的对待。笔记涉及问题：什么是拖延？为什么拖延？拖延的后果？改善拖延准则？方法？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>读《高效能人士的七个习惯》</title>
    <link href="http://www.phoebepan.cn/2017/06/18/higheffect/"/>
    <id>http://www.phoebepan.cn/2017/06/18/higheffect/</id>
    <published>2017-06-18T07:30:16.000Z</published>
    <updated>2017-10-03T08:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>思想决定行动，行动决定习惯<br>习惯决定品格，品格决定命运</p>
</blockquote>
<a id="more"></a>
<p><img src="/images/high_effect.png" alt="high_effect"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;思想决定行动，行动决定习惯&lt;br&gt;习惯决定品格，品格决定命运&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/categories/Thinking/"/>
    
    
      <category term="Reading" scheme="http://www.phoebepan.cn/tags/Reading/"/>
    
      <category term="Thinking" scheme="http://www.phoebepan.cn/tags/Thinking/"/>
    
  </entry>
  
</feed>
